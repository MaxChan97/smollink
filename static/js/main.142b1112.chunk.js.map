{"version":3,"sources":["assets/icons/TypingIcon.svg","assets/icons/CustomizeIcon.svg","firebase/index.js","pages/ShortenURL/CreatedSmollinkItem.js","pages/ShortenURL/CreatedSmollinksDrawer.js","pages/ShortenURL/index.js","redux/actions/index.js","pages/Redirect/index.js","pages/NotFound/index.js","App.js","reportWebVitals.js","redux/reducers/smollinkCurrentUser.js","redux/reducers/index.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","CreatedSmollinkItem","originalURL","smollink","useClipboard","hasCopied","onCopy","style","display","flexDirection","paddingTop","fontWeight","onClick","ml","size","marginTop","CreatedSmollinksDrawer","isOpen","onClose","smollinkCurrentUser","useState","createdSmollinks","setCreatedSmollinks","isLoading","setIsLoading","useEffect","collection","doc","orderBy","get","then","querySnapshot","createdSmollinksTemp","forEach","smollinkAlias","id","data","unshift","console","log","finally","placement","borderBottomWidth","length","textAlign","map","createdSmollink","idx","window","location","href","processURL","inputURL","processedURL","slice","ShortenURL","dispatch","useDispatch","useSelector","state","setInputURL","customSmollinkAlias","setCustomSmollinkAlias","isCreatingSmollink","setIsCreatingSmollink","useDisclosure","onOpen","isCustomSmollinkAliasTaken","a","firebaseDoc","exists","isCustomSmollinkAliasValid","validator","isURL","toast","error","cryptoRandomString","type","timestamp","FieldValue","serverTimestamp","set","creator","createdAt","success","catch","newUserId","payload","justifyContent","alignItems","width","color","fontSize","colorScheme","variant","paddingBottom","src","TypingIcon","alt","height","marginRight","children","value","onChange","e","target","placeholder","CustomizeIcon","loadingText","Redirect","alias","useParams","history","useHistory","push","NotFound","as","cursor","App","className","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","smollinkCurrentUserReducer","allReducers","combineReducers","persistConfig","key","storage","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","ReactDOM","render","StrictMode","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","loading","document","getElementById"],"mappings":"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","file":"static/js/main.142b1112.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/TypingIcon.86aae574.svg\";","export default __webpack_public_path__ + \"static/media/CustomizeIcon.b945da33.svg\";","import firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyDNoIUkXecqpwOlZFey_sDA9glGlTv0bO4',\r\n  authDomain: 'url-shortener-afee5.firebaseapp.com',\r\n  projectId: 'url-shortener-afee5',\r\n  storageBucket: 'url-shortener-afee5.appspot.com',\r\n  messagingSenderId: '142883085716',\r\n  appId: '1:142883085716:web:dcc694084c575807c04381',\r\n  measurementId: 'G-FD5VYNSL7Z',\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebase.firestore();\r\n\r\nexport { db, firebase as default };\r\n","import React from 'react';\r\n// imports for charkra ui\r\nimport { useClipboard, Button } from '@chakra-ui/react';\r\n\r\nexport default function CreatedSmollinkItem({ originalURL, smollink }) {\r\n  const { hasCopied, onCopy } = useClipboard(smollink);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        paddingTop: '8px',\r\n      }}\r\n    >\r\n      <h4 style={{ fontWeight: 'bold' }}>Original URL:</h4>\r\n      <h5>{originalURL}</h5>\r\n      <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n        <h4 style={{ fontWeight: 'bold' }}>smollink:</h4>\r\n        <Button onClick={onCopy} ml={2} size='xs'>\r\n          {hasCopied ? 'Copied' : 'Copy'}\r\n        </Button>\r\n      </div>\r\n      <h5>{smollink}</h5>\r\n      <hr style={{ marginTop: '8px' }} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// imports for charkra ui components\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n  DrawerContent,\r\n  Spinner,\r\n} from '@chakra-ui/react';\r\n// imports for firebase\r\nimport { db } from '../../firebase';\r\n// import created smollink item component\r\nimport CreatedSmollinkItem from './CreatedSmollinkItem';\r\n\r\nexport default function CreatedSmollinksDrawer({\r\n  isOpen,\r\n  onClose,\r\n  smollinkCurrentUser,\r\n}) {\r\n  const [createdSmollinks, setCreatedSmollinks] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isOpen === true) {\r\n      loadCreatedSmollinks();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  function loadCreatedSmollinks() {\r\n    setIsLoading(true);\r\n    db.collection('users')\r\n      .doc(smollinkCurrentUser)\r\n      .collection('createdSmollinks')\r\n      .orderBy('createdAt')\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        let createdSmollinksTemp = [];\r\n        querySnapshot.forEach((doc) => {\r\n          let smollink = {\r\n            smollinkAlias: doc.id,\r\n            originalURL: doc.data().originalURL,\r\n          };\r\n          createdSmollinksTemp.unshift(smollink);\r\n        });\r\n        setCreatedSmollinks(createdSmollinksTemp);\r\n        console.log(createdSmollinksTemp);\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  }\r\n\r\n  function displayCreatedSmollinkItems() {\r\n    if (createdSmollinks.length === 0) {\r\n      return <h1 style={{ textAlign: 'center' }}>No smollinks!</h1>;\r\n    } else {\r\n      return createdSmollinks.map((createdSmollink, idx) => {\r\n        const smollink = window.location.href + createdSmollink.smollinkAlias;\r\n        return (\r\n          <CreatedSmollinkItem\r\n            key={idx}\r\n            originalURL={createdSmollink.originalURL}\r\n            smollink={smollink}\r\n          />\r\n        );\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Drawer placement='right' onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth='1px'>My smollinks</DrawerHeader>\r\n          {isLoading ? (\r\n            <DrawerBody>\r\n              <Spinner />\r\n            </DrawerBody>\r\n          ) : (\r\n            <DrawerBody style={{ paddingTop: '0' }}>\r\n              {displayCreatedSmollinkItems()}\r\n            </DrawerBody>\r\n          )}\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// imports for charkra ui components\r\nimport {\r\n  Text,\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  Button,\r\n  useDisclosure,\r\n} from '@chakra-ui/react';\r\n// imports for local assets\r\nimport TypingIcon from '../../assets/icons/TypingIcon.svg';\r\nimport CustomizeIcon from '../../assets/icons/CustomizeIcon.svg';\r\n// imports for validating URL\r\nimport validator from 'validator';\r\n// imports for alert messages\r\nimport { toast } from 'react-toastify';\r\n// imports for generating random string\r\nimport cryptoRandomString from 'crypto-random-string';\r\n// imports for firebase\r\nimport { db } from '../../firebase';\r\nimport firebase from 'firebase/app';\r\n// imports for redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addNewUser } from '../../redux/actions';\r\n// imports for drawer displaying created smollinks\r\nimport CreatedSmollinkDrawer from './CreatedSmollinksDrawer';\r\n\r\nexport function processURL(inputURL) {\r\n  let processedURL;\r\n  if (inputURL.slice(0, 12) === 'https://www.') {\r\n    // this format 'https://www.google.com'\r\n    // no need do anything\r\n    processedURL = inputURL;\r\n  } else if (inputURL.slice(0, 8) === 'https://') {\r\n    // this format 'https://google.com'\r\n    const rawURL = inputURL.slice(8);\r\n    processedURL = 'https://www.' + rawURL;\r\n  } else if (inputURL.slice(0, 4) === 'www.') {\r\n    // this format 'www.google.com'\r\n    const rawURL = inputURL.slice(4);\r\n    processedURL = 'https://www.' + rawURL;\r\n  } else {\r\n    // this format 'google.com'\r\n    processedURL = 'https://www.' + inputURL;\r\n  }\r\n  return processedURL;\r\n}\r\n\r\nexport default function ShortenURL() {\r\n  const dispatch = useDispatch();\r\n  let smollinkCurrentUser = useSelector((state) => state.smollinkCurrentUser);\r\n\r\n  const [inputURL, setInputURL] = useState('');\r\n  const [customSmollinkAlias, setCustomSmollinkAlias] = useState('');\r\n  const [isCreatingSmollink, setIsCreatingSmollink] = useState(false);\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  useEffect(() => {\r\n    console.log(smollinkCurrentUser);\r\n    if (!smollinkCurrentUser) {\r\n      console.log('new user created');\r\n      const newUserId = cryptoRandomString({ length: 20, type: 'url-safe' });\r\n      db.collection('users').doc(newUserId).set({});\r\n      dispatch(addNewUser(newUserId));\r\n      smollinkCurrentUser = newUserId;\r\n    }\r\n    console.log(smollinkCurrentUser);\r\n  }, [smollinkCurrentUser]);\r\n\r\n  async function isCustomSmollinkAliasTaken() {\r\n    const firebaseDoc = await db\r\n      .collection('smollinks')\r\n      .doc(customSmollinkAlias)\r\n      .get();\r\n    return firebaseDoc.exists;\r\n  }\r\n\r\n  function isCustomSmollinkAliasValid() {\r\n    // always returns false\r\n    return validator.isURL('https://www.google.com/' + customSmollinkAlias);\r\n  }\r\n\r\n  async function onCreateSmollink() {\r\n    // check the format of the originalURL input i.e. is it 'https://www.google.com' or 'https://google.com' or 'www.google.com' or 'google.com' and process accordingly\r\n    setIsCreatingSmollink(true);\r\n    let processedURL = processURL(inputURL);\r\n    // check if URL to be shortened is legit\r\n    const isURLValid = validator.isURL(processedURL);\r\n    if (isURLValid) {\r\n      // check if users custom smollink alias is usable\r\n      if (customSmollinkAlias !== '' && (await isCustomSmollinkAliasTaken())) {\r\n        toast.error('Custom link inputted is already taken!');\r\n      } else if (customSmollinkAlias !== '' && !isCustomSmollinkAliasValid()) {\r\n        toast.error('Custom link inputted is not a valid URL!');\r\n      } else {\r\n        let smollinkAlias;\r\n        if (customSmollinkAlias !== '') {\r\n          // use custom smollink alias\r\n          smollinkAlias = customSmollinkAlias;\r\n        } else {\r\n          // generate random string as smollink alias\r\n          smollinkAlias = cryptoRandomString({ length: 10, type: 'url-safe' });\r\n        }\r\n        // persist and send success msg\r\n        const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n        db.collection('smollinks')\r\n          .doc(smollinkAlias)\r\n          .set({\r\n            originalURL: processedURL,\r\n            creator: smollinkCurrentUser,\r\n            createdAt: timestamp(),\r\n          })\r\n          .then(() => {\r\n            db.collection('users')\r\n              .doc(smollinkCurrentUser)\r\n              .collection('createdSmollinks')\r\n              .doc(smollinkAlias)\r\n              .set({\r\n                originalURL: processedURL,\r\n                createdAt: timestamp(),\r\n              })\r\n              .then(() => {\r\n                toast.success('smollink successfully created!');\r\n                setInputURL('');\r\n                setCustomSmollinkAlias('');\r\n                onOpen();\r\n              })\r\n              .catch((error) => {\r\n                toast.error('Something went wrong please try again');\r\n                console.error('Error writing document: ', error);\r\n              });\r\n          })\r\n          .catch((error) => {\r\n            toast.error('Something went wrong please try again');\r\n            console.error('Error writing document: ', error);\r\n          });\r\n      }\r\n    } else {\r\n      toast.error('The inputted URL is invalid!');\r\n    }\r\n    setIsCreatingSmollink(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        paddingTop: '18px',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          width: '60%',\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            width: '100%',\r\n          }}\r\n        >\r\n          <Text color='gray.500' fontSize='4xl'>\r\n            Welcome to smollink!\r\n          </Text>\r\n          <Button\r\n            colorScheme='teal'\r\n            variant='outline'\r\n            style={{ marginTop: '8px' }}\r\n            onClick={onOpen}\r\n          >\r\n            My smollinks\r\n          </Button>\r\n        </div>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            width: '100%',\r\n            textAlign: 'start',\r\n            alignItems: 'center',\r\n            paddingTop: '18px',\r\n            paddingBottom: '10px',\r\n          }}\r\n        >\r\n          <img\r\n            src={TypingIcon}\r\n            alt=''\r\n            style={{ height: '38px', marginRight: '8px' }}\r\n          />\r\n          <Text color='black.500' fontSize='lg'>\r\n            Enter a long URL to make a smollink\r\n          </Text>\r\n        </div>\r\n        <InputGroup>\r\n          <InputLeftAddon children='https://www.' />\r\n          <Input\r\n            value={inputURL}\r\n            onChange={(e) => {\r\n              setInputURL(e.target.value);\r\n            }}\r\n            placeholder='Enter url here'\r\n          />\r\n        </InputGroup>\r\n        <div\r\n          style={{\r\n            display: 'flex',\r\n            width: '100%',\r\n            textAlign: 'start',\r\n            alignItems: 'center',\r\n            paddingTop: '18px',\r\n            paddingBottom: '10px',\r\n          }}\r\n        >\r\n          <img\r\n            src={CustomizeIcon}\r\n            alt=''\r\n            style={{ height: '38px', marginRight: '8px' }}\r\n          />\r\n          <Text color='black.500' fontSize='lg'>\r\n            Customise your link\r\n          </Text>\r\n        </div>\r\n        <InputGroup>\r\n          <InputLeftAddon children={window.location.href} />\r\n          <Input\r\n            value={customSmollinkAlias}\r\n            onChange={(e) => {\r\n              setCustomSmollinkAlias(e.target.value);\r\n            }}\r\n            width='50%'\r\n            placeholder='Leave this empty if you do not mind a random link'\r\n          />\r\n        </InputGroup>\r\n        <div style={{ paddingTop: '30px' }}>\r\n          <Button\r\n            isLoading={isCreatingSmollink}\r\n            loadingText='Creating'\r\n            colorScheme='teal'\r\n            variant='solid'\r\n            onClick={onCreateSmollink}\r\n          >\r\n            Create smollink!\r\n          </Button>\r\n        </div>\r\n      </div>\r\n      <CreatedSmollinkDrawer\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        smollinkCurrentUser={smollinkCurrentUser}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","export const ADD_NEW_USER = 'ADD_NEW_USER';\r\n\r\nexport const addNewUser = (userId) => ({\r\n  type: ADD_NEW_USER,\r\n  payload: userId,\r\n});\r\n","import React, { useEffect } from 'react';\r\n// imports for routing\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n// imports for firebase\r\nimport { db } from '../../firebase';\r\n\r\nexport default function Redirect() {\r\n  const { alias } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const firebaseDoc = await db.collection('smollinks').doc(alias).get();\r\n      if (firebaseDoc.exists) {\r\n        window.location.href = firebaseDoc.data().originalURL;\r\n      } else {\r\n        // send to not found page\r\n        history.push('/NotFound/NotFound');\r\n      }\r\n    })();\r\n  }, [alias]);\r\n\r\n  return '';\r\n}\r\n","import React from 'react';\r\n// imports for react router\r\nimport { useHistory } from 'react-router-dom';\r\n// imports for charkra ui components\r\nimport { Text } from '@chakra-ui/react';\r\n\r\nexport default function NotFound() {\r\n  const history = useHistory();\r\n\r\n  function onClickReturnMainPage() {\r\n    history.push('/');\r\n  }\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        paddingTop: '18px',\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          width: '60%',\r\n        }}\r\n      >\r\n        <Text color='gray.500' fontSize='4xl'>\r\n          The page you're looking for does not exist\r\n        </Text>\r\n        <Text\r\n          as='u'\r\n          color='blue.500'\r\n          fontSize='xl'\r\n          style={{ cursor: 'pointer' }}\r\n          onClick={onClickReturnMainPage}\r\n        >\r\n          please click here to return to main page\r\n        </Text>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\n// imports for routing\nimport { Route, Switch } from 'react-router-dom';\n// page imports\nimport ShortenURL from './pages/ShortenURL';\nimport Redirect from './pages/Redirect';\nimport NotFound from './pages/NotFound';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Switch>\n        <Route exact path='/' component={ShortenURL} />\n        <Route exact path='/:alias' component={Redirect} />\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const smollinkCurrentUserReducer = (state = null, { type, payload }) => {\r\n  switch (type) {\r\n    case 'ADD_NEW_USER':\r\n      return payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default smollinkCurrentUserReducer;\r\n","import smollinkCurrentUserReducer from './smollinkCurrentUser';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst allReducers = combineReducers({\r\n  smollinkCurrentUser: smollinkCurrentUserReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// imports for routing\nimport { BrowserRouter } from 'react-router-dom';\n// imports for toast alerts\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n// imports for Chakra UI\nimport { ChakraProvider } from '@chakra-ui/react';\n// imports for redux\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport allReducers from './redux/reducers';\n\n// Redux stuff\nconst persistConfig = {\n  key: 'reducer',\n  storage: storage,\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst persistedReducer = persistReducer(persistConfig, allReducers);\nconst store = createStore(\n  persistedReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\nconst persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToastContainer\n      position='top-left'\n      autoClose={5000}\n      hideProgressBar={false}\n      newestOnTop={false}\n      closeOnClick\n      rtl={false}\n      pauseOnFocusLoss\n      draggable\n      pauseOnHover\n    />\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <ChakraProvider>\n            <App />\n          </ChakraProvider>\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}